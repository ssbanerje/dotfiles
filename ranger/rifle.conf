# This is the configuration file of "rifle", ranger's file executor/opener.
# Each line consists of conditions and a command.  For each line the conditions
# are checked and if they are met, the respective command is run.
#
# Syntax:
#   <condition1> , <condition2> , ... = command
#
# The command can contain these environment variables:
#   $1-$9 | The n-th selected file
#   $@    | All selected files
#
# If you use the special command "ask", rifle will ask you what program to run.
#
# Prefixing a condition with "!" will negate its result.
# These conditions are currently supported:
#   match <regexp> | The regexp matches $1
#   ext <regexp>   | The regexp matches the extension of $1
#   mime <regexp>  | The regexp matches the mime type of $1
#   name <regexp>  | The regexp matches the basename of $1
#   path <regexp>  | The regexp matches the absolute path of $1
#   has <program>  | The program is installed (i.e. located in $PATH)
#   env <variable> | The environment variable "variable" is non-empty
#   file           | $1 is a file
#   directory      | $1 is a directory
#   number <n>     | change the number of this command to n
#   terminal       | stdin, stderr and stdout are connected to a terminal
#   X              | $DISPLAY is not empty (i.e. Xorg runs)
#
# There are also pseudo-conditions which have a "side effect":
#   flag <flags>  | Change how the program is run. See below.
#   label <label> | Assign a label or name to the command so it can
#                 | be started with :open_with <label> in ranger
#                 | or `rifle -p <label>` in the standalone executable.
#   else          | Always true.
#
# Flags are single characters which slightly transform the command:
#   f | Fork the program, make it run in the background.
#     |   New command = setsid $command >& /dev/null &
#   r | Execute the command with root permissions
#     |   New command = sudo $command
#   t | Run the program in a new terminal.  If $TERMCMD is not defined,
#     | rifle will attempt to extract it from $TERM.
#     |   New command = $TERMCMD -e $command
# Note: The "New command" serves only as an illustration, the exact
# implementation may differ.
# Note: When using rifle in ranger, there is an additional flag "c" for
# only running the current file even if you have marked multiple files.

############################### Text ##############################{{{1
mime ^text, label editor                                              = ${VISUAL:-$EDITOR} -- "$@"
mime ^text, label pager                                               = "$PAGER" -- "$@"
!mime ^text, label editor, ext xml|json|csv|tex|py|pl|rb|rs|js|sh|php = ${VISUAL:-$EDITOR} -- "$@"
!mime ^text, label pager,  ext xml|json|csv|tex|py|pl|rb|rs|js|sh|php = "$PAGER" -- "$@"
ext 1                                                                 = man "$1"

############################### Archives ##############################{{{1
ext 7z, has 7z                                                 = 7z -p l "$@" | "$PAGER"
ext ace|ar|arc|bz2?|cab|cpio|cpt|deb|dgc|dmg|gz, has atool     = atool --list --each -- "$@" | "$PAGER"
ext iso|jar|msi|pkg|rar|shar|tar|tgz|xar|xpi|xz|zip, has atool = atool --list --each -- "$@" | "$PAGER"
ext 7z|ace|ar|arc|bz2?|cab|cpio|cpt|deb|dgc|dmg|gz, has atool  = atool --extract --each -- "$@"
ext iso|jar|msi|pkg|rar|shar|tar|tgz|xar|xpi|xz|zip, has atool = atool --extract --each -- "$@"
ext tar|gz|bz2|xz, has tar                                     = tar vvtf "$1" | "$PAGER"
ext tar|gz|bz2|xz, has tar                                     = for file in "$@"; do tar vvxf "$file"; done
ext bz2, has bzip2                                             = for file in "$@"; do bzip2 -dk "$file"; done
ext zip, has unzip                                             = unzip -l "$1" | less
ext zip, has unzip                                             = for file in "$@"; do unzip -d "${file%.*}" "$file"; done
ext ace, has unace                                             = unace l "$1" | less
ext ace, has unace                                             = for file in "$@"; do unace e "$file"; done
ext rar, has unrar                                             = unrar l "$1" | less
ext rar, has unrar                                             = for file in "$@"; do unrar x "$file"; done

############################### Media Formats ##############################{{{1
mime ^video, has mpv, X, flag f     = mpv -- "$@"
mime ^audio|ogg$, terminal, has mpv = mpv --no-audio-display -- "$@"

############################### Intepreted Code ##############################{{{1
ext py  = python -- "$1"
ext pl  = perl -- "$1"
ext js  = node -- "$1"
ext sh  = sh -- "$1"
ext jar = java -jar "$@"

############################### Fallback ##############################{{{1
mime application/x-executable   = "$1"
mime application/x-mach-binary  = "$1"
ext .+, has open, X, flag f     = open -- "$1"
ext .+, has xdg_open, X, flag f = xdg_open -- "$1"

# vim: ft=cfg fdm=marker:

